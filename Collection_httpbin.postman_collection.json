{
	"info": {
		"_postman_id": "2eca0b80-6e9b-4f50-9026-85972de2df3b",
		"name": "Collection_httpbin",
		"description": "This collection contains Requests from \nhttp://httpbin.org/#/\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "GET - status code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd9c80fa-abfa-4506-9380-f1b0ee59ebc5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "text/plain"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "Referer",
								"value": "http://httpbin.org/"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3717.0 Safari/537.36"
							}
						],
						"body": {},
						"url": {
							"raw": "http://httpbin.org/status/:status",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"status",
								":status"
							],
							"variable": [
								{
									"key": "status",
									"value": "200"
								}
							]
						},
						"description": " http://httpbin.org/status/200"
					},
					"response": [
						{
							"name": "GET - status code",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "text/plain"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Referer",
										"value": "http://httpbin.org/"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3717.0 Safari/537.36"
									}
								],
								"body": {},
								"url": {
									"raw": "http://httpbin.org/status/:status",
									"protocol": "http",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"status",
										":status"
									],
									"variable": [
										{
											"key": "status",
											"value": "200"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Tue, 05 Mar 2019 19:08:08 GMT"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "GET - Bearer Authorization Header added",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{uuid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/bearer",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"bearer"
							]
						},
						"description": "httpbin.org/bearer"
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "POST - sending JSON payload in the body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98763d65-13ba-4018-b8d2-67bca2d2f43a",
								"exec": [
									"pm.variables.set(\"name\", \"John\");  // set a local var"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08b07f6c-775f-45a7-98a0-f354a3233b68",
								"exec": [
									"const respBody = pm.response.json();",
									"",
									"pm.test(\"Local variable name = John\", function () {",
									"    pm.expect(pm.variables.get(\"name\")).to.eql(\"John\");",
									"});",
									"",
									"pm.test(\"Response Body includes John\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"John\"); // response contains word John",
									"    pm.expect(respBody.data).to.include(\"John\"); // similar to above",
									"});",
									"",
									"pm.test(\"Response url value\", function () {",
									"    pm.expect(respBody.url).to.eql(\"https://httpbin.org/post\");",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"customerId\": 100,\n\t\"orderId\": \"1234\",\n\t\"name\" : {{name}},\n\t\"products\": [\n\t\t{\n\t\t\"quantity\": 20,\n\t\t\"productId\": 3000\n\t\t},\n\t\t{\n\t\t\"quantity\": 10,\n\t\t\"productId\": 2000\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "httpbin.org/post",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"post"
							]
						},
						"description": "httpbin.org/post"
					},
					"response": []
				}
			]
		},
		{
			"name": "Property Transfer",
			"item": [
				{
					"name": "GET - uuid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fbe28a8-a06d-450a-8868-b83fa3c9cf2a",
								"exec": [
									"",
									"// get entire JSON response and log it to Console ",
									"console.log(pm.response.json());",
									"",
									"// Save JSON response as a constant",
									"const response = pm.response.json();",
									"",
									"// get “uuid” value from JSON response and log it to Console ",
									"console.log(response.uuid);",
									"",
									"// set “uuid” value as a Global variable",
									"pm.globals.set(\"uuid\", response.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "Getting unique uuis value from server with every request"
					},
					"response": []
				},
				{
					"name": "POST - gets uuid value",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{uuid}}\"\n}"
						},
						"url": {
							"raw": "httpbin.org/post",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"post"
							]
						},
						"description": "httpbin.org/post"
					},
					"response": []
				}
			],
			"description": "This is an example of Property Transfer from Response to another Request"
		},
		{
			"name": "Generate Random Property",
			"item": [
				{
					"name": "POST - generate and use ramdom customerID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53527dfb-9f24-4eef-a94f-fe2189b86679",
								"exec": [
									"// generates a random number between 1 and 100",
									"const customerId = Math.floor((Math.random() * 100) +1);",
									"console.log(customerId);",
									"",
									"// set the customerID value as a Global variable",
									"pm.globals.set(\"customerId\", customerId);",
									"",
									"// Now we can use the global var in the body of the same request."
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d327ac37-8daa-4eb1-a3f6-9fe63eb6e1e4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"// Get a Global var customerID ",
									"var customerId = pm.globals.get(\"customerId\");",
									"// and verify that json Reponse body contains the customerId value",
									"pm.test(\"Verify customerId\", function () {",
									"    pm.expect(response.json.customerId).to.eql(customerId);",
									"});",
									"console.log(response.json.customerId);",
									"",
									"// Check that json Reponse body contains the correct productId that is inside an array",
									"pm.test(\"check productId\", function () {",
									"    pm.expect(response.json.products[0].productId).to.eql(3000);",
									"    pm.expect(response.json.products[1].productId).to.eql(2000);",
									"    ",
									"});",
									"console.log(response.json.products[0].productId); // 3000",
									"",
									"// Validating presence of the \"Content-Type\" header in the response and its value",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\"); // verifies that header Content-Type is present",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\"); // verify value of the header",
									"});",
									"",
									"",
									"console.info(typeof response);  // object",
									"console.info(typeof response.headers.Accept);  // string",
									"console.info(typeof response.json.customerId);  // number",
									"console.info(typeof response.json.products);  // object",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"customerId\": {{customerId}},\n\t\"orderId\": {{$randomInt}},\n\t\t\"products\": [\n\t\t{\n\t\t\"quantity\": 20,\n\t\t\"productId\": 3000\n\t\t},\n\t\t{\n\t\t\"quantity\": 10,\n\t\t\"productId\": 2000\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/post",
							"host": [
								"{{url}}"
							],
							"path": [
								"post"
							]
						},
						"description": "httpbin.org/post"
					},
					"response": []
				}
			]
		}
	]
}